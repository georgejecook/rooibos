{
  //rooibos
  "rooibos beforeEach": {
    "prefix": "beforeEach",
    "body": [
      "@beforeEach",
      "function ${2:namespace}_${3:itGroup}_beforeEach()",
      "\t$0",
      "end function"
    ]
  },
  "rooibos afterEach": {
    "prefix": "afterEach",
    "body": [
      "@afterEach",
      "function ${2:namespace}_${3:itGroup}_afterEach()",
      "\t$0",
      "end function"
    ]
  },
  "rooibos setup": {
    "prefix": "setup",
    "body": [
      "@setup",
      "function ${2:namespace}_setup()",
      "\t$0",
      "end function"
    ]
  },
  "rooibos tearDown": {
    "prefix": "tearDown",
    "body": [
      "@tearDown",
      "function ${2:namespace}_tearDown()",
      "\t$0",
      "end function"
    ]
  },
  "rooibos ignore": {
    "prefix": "ignore",
    "body": ["@ignore ${1:reason}", "$0"]
  },
  "rooibos only": {
    "prefix": "only",
    "body": ["@only", "$0"]
  },
  "rooibos testSuite": {
    "prefix": "suite",
    "body": ["@suite(\"$1\")", "$0"]
  },
  "rooibos testcase": {
    "prefix": "it",
    "body": ["@it(\"$1\")", "function _()", "\t$0", "end function"]
  },
  "rooibos params": {
    "prefix": "params",
    "body": ["@params(${1:values})$0"]
  },
  "rooibos it": {
    "prefix": "describe",
    "body": [
      "'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "@describe(\"${1:groupName}\")",
      "'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "",
      "$0"
    ]
  },
  "rooibos stub": {
    "prefix": "stub",
    "body": [
      "m.stub(${1:target}, \"${2:methodName}\", [${3:methodArgs}], ${4:result})",
      "$0"
    ]
  },
  "rooibos mock": {
    "prefix": "expect",
    "body": [
      "${1:mockName} = m.mock(${2:target}, \"${3:methodName}\", ${4:expectedNumberOfcalls}, [${5:methodArgs}], ${6:result})",
      "$0"
    ]
  },
  "rooibos expect": {
    "prefix": "expect",
    "body": [
      "m.expectOnce(${1:target}, \"${2:methodName}\", ${3:expectedNumberOfcalls}, [${4:methodArgs}], ${5:result})",
      "$0"
    ]
  },
  "rooibos expectOnce": {
    "prefix": "expectOnce",
    "body": [
      "m.expectOnce(${1:target}, \"${2:methodName}\", [${3:methodArgs}], ${4:result})",
      "$0"
    ]
  },
  "rooibos expectCallfunc": {
    "prefix": "expectCallfunc",
    "body": [
      "m.expectOnce(${1:target}, \"callFunc\", [\"${2:methodName}\", ${3:methodArgs}], ${4:result})",
      "$0"
    ]
  },
  "rooibos expectObserveNodeField": {
    "prefix": "eonf",
    "body": [
      "m.expectOnce(${1:target}, \"observeNodeField\", [${2:node},\"${3:fieldName}\", m.${4:callback}])",
      "$0"
    ]
  },
  "rooibos expectUnObserveNodeField": {
    "prefix": "eunf",
    "body": [
      "m.expectOnce(${1:target}, \"unobserveNodeField\", [${2:node},\"${:fieldName}\", m.${4:callback}])",
      "$0"
    ]
  },
  "rooibos expectObjectOnce": {
    "prefix": "expectObjectOnce",
    "body": [
      "${1:name} = { \"id\" : \"${1:name}\" }",
      "m.expectOnce(${2:target}, \"${3:methodName}\", [${4:methodArgs}], ${1:name})",
      "$0"
    ]
  },
  "rooibos expectGetInstance": {
    "prefix": "expectGetInstance",
    "body": [
      "${1:name} = { \"id\" : \"${1:name}\" }",
      "m.expectOnce(${2:target}, \"getInstance\", [\"${3:instanceName}\"], ${1:name})",
      "$0"
    ]
  },
  "rooibos expectGetClassInstance": {
    "prefix": "expectGetClassInstance",
    "body": [
      "${1:name} = { \"id\" : \"${1:name}\" }",
      "m.expectOnce(${2:target}, \"getClassInstance\", [\"${3:instanceName}\"], ${1:name})",
      "$0"
    ]
  },
  "rooibos expectExpectOnce": {
    "prefix": "expectExpect",
    "body": [
      "${1:name} = { \"id\" : \"${1:name}\" }",
      "m.expectOnce(${2:target}, \"${3:methodName}\", [${4:methodArgs}], ${1:name})",
      "m.expectOnce(${1:name}, \"${5:methodName}\", [${6:methodArgs}], ${7:name})",
      "$0"
    ]
  },
  "rooibos expectNone": {
    "prefix": "expectNone",
    "body": ["m.expectNone(${1:target}, \"${2:methodName}\")", "$0"]
  },
  "rooibos assertFalse": {
    "prefix": "assertFalse",
    "body": ["m.assertFalse(${1:value})", "$0"]
  },
  "rooibos assertAsync": {
    "prefix": "assertAsync",
    "body": ["m.AssertAsyncField(${1:value}, $2{:fieldName})", "$0"]
  },
  "rooibos assertTrue": {
    "prefix": "assertTrue",
    "body": ["m.assertTrue(${1:value})", "$0"]
  },
  "rooibos assertEqual": {
    "prefix": "assertEqual",
    "body": ["m.assertEqual(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertLike": {
    "prefix": "assertLike",
    "body": ["m.assertLike(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertNotEqual": {
    "prefix": "assertNotEqual",
    "body": ["m.assertNotEqual(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertInvalid": {
    "prefix": "assertInvalid",
    "body": ["m.assertInvalid(${1:value})", "$0"]
  },
  "rooibos assertNotInvalid": {
    "prefix": "assertNotInvalid",
    "body": ["m.assertNotInvalid(${1:value})", "$0"]
  },
  "rooibos assertAAHasKey": {
    "prefix": "assertAAHasKey",
    "body": ["m.assertAAHasKey(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertAANotHasKey": {
    "prefix": "assertAANotHasKey",
    "body": ["m.assertAANotHasKey(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertAAHasKeys": {
    "prefix": "assertAAHasKeys",
    "body": ["m.assertAAHasKeys(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertAANotHasKeys": {
    "prefix": "assertAANotHasKeys",
    "body": ["m.assertAANotHasKeys(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertArrayContains": {
    "prefix": "assertArrayContains",
    "body": ["m.assertArrayContains(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertArrayNotContains": {
    "prefix": "assertArrayNotContains",
    "body": ["m.assertArrayNotContains(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertArrayContainsSubset": {
    "prefix": "assertArrayContainsSubset",
    "body": ["m.assertArrayContainsSubset(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertArrayContainsAAs": {
    "prefix": "assertArrayContainsAAs",
    "body": ["m.assertArrayContainsAAs(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertArrayNotContainsSubset": {
    "prefix": "assertArrayNotContainsSubset",
    "body": ["m.assertArrayNotContainsSubset(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertArrayCount": {
    "prefix": "assertArrayCount",
    "body": ["m.assertArrayCount(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertArrayNotCount": {
    "prefix": "assertArrayNotCount",
    "body": ["m.assertArrayNotCount(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertEmpty": {
    "prefix": "assertEmpty",
    "body": ["m.assertEmpty(${1:value})", "$0"]
  },
  "rooibos assertNotEmpty": {
    "prefix": "assertNotEmpty",
    "body": ["m.assertNotEmpty(${1:value})", "$0"]
  },
  "rooibos assertArrayContainsOnlyValuesOfType": {
    "prefix": "assertArrayContainsOnlyValuesOfType",
    "body": [
      "m.assertArrayContainsOnlyValuesOfType(${1:value}, ${2:expected})",
      "$0"
    ]
  },
  "rooibos assertType": {
    "prefix": "assertType",
    "body": ["m.assertType(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertSubType": {
    "prefix": "assertSubType",
    "body": ["m.assertSubType(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertNodeCount": {
    "prefix": "assertNodeCount",
    "body": ["m.assertNodeCount(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertNodeNotCount": {
    "prefix": "assertNodeNotCount",
    "body": ["m.assertNodeNotCount(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertNodeEmpty": {
    "prefix": "assertNodeEmpty",
    "body": ["m.assertNodeEmpty(${1:value})", "$0"]
  },
  "rooibos assertNodeNotEmpty": {
    "prefix": "assertNodeNotEmpty",
    "body": ["m.assertNodeNotEmpty(${1:value})", "$0"]
  },
  "rooibos assertNodeContains": {
    "prefix": "assertNodeContains",
    "body": ["m.assertNodeContains(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertNodeNotContains": {
    "prefix": "assertNodeNotContains",
    "body": ["m.assertNodeNotContains(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertNodeContainsFields": {
    "prefix": "assertNodeContainsFields",
    "body": ["m.assertNodeContainsFields(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertNodeNotContainsFields": {
    "prefix": "assertNodeNotContainsFields",
    "body": ["m.assertNodeNotContainsFields(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertAAContainsSubset": {
    "prefix": "assertAAContainsSubset",
    "body": ["m.assertAAContainsSubset(${1:value}, ${2:expected})", "$0"]
  },
  "rooibos assertMocks": {
    "prefix": "assertMocks",
    "body": ["m.assertMocks(${1:value}, ${2:expected})", "$0"]
  },

  //stub objexts
  "stubobject": {
    "prefix": "so",
    "body": ["${1:name} = { \"id\" : \"${1:name}\" }", "$0"]
  },
  "stubaaobject": {
    "prefix": "aso",
    "body": ["${1:name}: { \"id\" : \"${1:name}\" }", "$0"]
  },
  "stubiocobject": {
    "prefix": "sioc",
    "body": [
      "m.${1:name} = { \"id\" : \"${1:name}\" }",
      "mioc.setInstance(\"${1:name}\", m.${1:name})",
      "$0"
    ]
  },
  "mstubobject": {
    "prefix": "mso",
    "body": ["m.${1:name} = { \"id\" : \"${1:name}\" }", "$0"]
  },

  //keys
  "isCapturingAnyKeyPress": {
    "prefix": "isCapturingAnyKeyPress",
    "body": [
      "private function isCapturingAnyKeyPress(key as string, press as boolean) as boolean",
      "\treturn false",
      "end function"
    ]
  },
  "onKeyPressDown": {
    "prefix": "onKeyPressDown",
    "body": [
      "private function onKeyPressDown() as boolean",
      "\treturn false",
      "end function"
    ]
  },
  "onKeyPressUp": {
    "prefix": "onKeyPressUp",
    "body": [
      "private function onKeyPressUp() as boolean",
      "\treturn false",
      "end function"
    ]
  },
  "onKeyPressLeft": {
    "prefix": "onKeyPressLeft",
    "body": [
      "private function onKeyPressLeft() as boolean",
      "\treturn false",
      "end function"
    ]
  },
  "onKeyPressRight": {
    "prefix": "onKeyPressRight",
    "body": [
      "private function onKeyPressRight() as boolean",
      "\treturn false",
      "end function"
    ]
  },
  "onKeyPressReplay": {
    "prefix": "onKeyPressReplay",
    "body": [
      "private function onKeyPressReplay() as boolean",
      "\treturn false",
      "end function"
    ]
  },
  "onKeyPressRewind": {
    "prefix": "onKeyPressRewind",
    "body": [
      "private function onKeyPressRewind() as boolean",
      "\treturn false",
      "end function"
    ]
  },
  "onKeyPressFastForward": {
    "prefix": "onKeyPressFastForward",
    "body": [
      "private function onKeyPressFastForward() as boolean",
      "\treturn false",
      "end function"
    ]
  },
  "onKeyPressBack": {
    "prefix": "onKeyPressBack",
    "body": [
      "private function onKeyPressBack() as boolean",
      "\treturn false",
      "end function"
    ]
  },
  "onKeyPressOptions": {
    "prefix": "onKeyPressOptions",
    "body": [
      "private function onKeyPressOptions() as boolean",
      "\treturn false",
      "end function"
    ]
  },
  "onKeyPressOK": {
    "prefix": "onKeyPressOK",
    "body": [
      "private function onKeyPressOK() as boolean",
      "\treturn false",
      "end function"
    ]
  },
  "onKeyPressPlay": {
    "prefix": "onKeyPressPlay",
    "body": [
      "private function onKeyPressPlay() as boolean",
      "\treturn false",
      "end function"
    ]
  },

  //lifecycle
  "onGainedFocus": {
    "prefix": "onGainedFocus",
    "body": [
      "private function onGainedFocus(isSelfFocused as boolean)",
      "\tsuper.onGainedFocus(isSelfFocused)",
      "\tif isSelfFocused",
      "\t\t$0",
      "\tend if",
      "end function"
    ]
  },
  "onLostFocus": {
    "prefix": "onLostFocus",
    "body": [
      "private function onLostFocus()",
      "\tsuper.onLostFocus()",
      "\t$0",
      "end function"
    ]
  },
  "onshow": {
    "prefix": "onshow",
    "description": "",
    "body": [
      "protected override private function onShow()",
      "\tsuper.onShow()",
      "  $0",
      "end function"
    ]
  },
  "onfirstshow": {
    "prefix": "onfirstshow",
    "description": "",
    "body": [
      "protected override private function onFirstShow()",
      "\tsuper.onFirstShow()",
      "  $0",
      "end function"
    ]
  },
  "onhide": {
    "prefix": "onhide",
    "description": "",
    "body": [
      "protected override private function onHide()",
      "\tsuper.onHide()",
      "  $0",
      "end function"
    ]
  },

  //diagnostics hints
  "bsdl": {
    "prefix": "bsdl",
    "description": "brighterscript disbale next line",
    "body": ["'bs:disable-next-line"]
  },
  "cspell-disable-line": {
    "prefix": "csdl",
    "description": "cspell disbale next line",
    "body": ["'// cspell:disable-next-line"]
  },
  "cspell-disable": {
    "prefix": "csd",
    "description": "cspell disbale",
    "body": ["'/* cspell:disable *\\"]
  },
  "cspell-enable": {
    "prefix": "cse",
    "description": "cspell enable",
    "body": ["'/* cspell:enable *\\"]
  },

  //type definitions
  "asinteger": {
    "prefix": "ai",
    "description": "as integer",
    "body": ["as integer"]
  },
  "asnode": {
    "prefix": "an",
    "description": "as node",
    "body": ["as mc.types.node"]
  },
  "asarray": {
    "prefix": "aa",
    "description": "as array",
    "body": ["as mc.types.array"]
  },
  "asassocarray": {
    "prefix": "aaa",
    "description": "as assocarray",
    "body": ["as mc.types.assocarray"]
  },
  "asfloat": {
    "prefix": "af",
    "description": "as float",
    "body": ["as float"]
  },
  "asobject": {
    "prefix": "ao",
    "description": "as object",
    "body": ["as object"]
  },
  "asboolean": {
    "prefix": "ab",
    "description": "as boolean",
    "body": ["as boolean"]
  },
  "asdynamic": {
    "prefix": "ad",
    "description": "as dynamic",
    "body": ["as dynamic"]
  },
  "asstring": {
    "prefix": "as",
    "description": "as string",
    "body": ["as string"]
  },

  //general
  "createsgnode": {
    "prefix": "createsgnode",
    "description": "",
    "body": [
      "m.$1 = m.createSGNode(\"$2\", ${3:m.top}, \"$1\", {",
      "\t$0",
      "})"
    ]
  },
  "cycleFocus": {
    "prefix": "cyclefocus",
    "description": "",
    "body": [
      "m.setFocus(m[mc.collections.getItemAtOffset(m.focusIds, m.${1:focusedControl.id}, ${2:-1})])",
      "\t$0"
    ]
  },
  "function": {
    "prefix": "function",
    "body": ["function ${1:name}(${2:args}) ${3:as}", "\t${0}", "end function"]
  },
  "observe node field": {
    "prefix": "observenodefield",
    "body": [
      "${2:m}.observeNodeField(${3:object}, \"${4:name}\", ${6:m.}${7| ,\\, \"value\",\\, \"both\",\\, \"node\"|})",
      "$0"
    ]
  },
  "unobserve node field": {
    "prefix": "unobservenodefield",
    "body": [
      "${2:m}.unobserveNodeField(${3:object}, \"${4:name}\", ${6:m.})",
      "$0"
    ]
  },
  "createTask": {
    "prefix": "createtask",
    "body": [
      "${2:m.thing} = m.createTask(\"${4:name}\", ${5:args}, ${6:m.}${7| ,\\, true,\\, false|}${8| ,\\, \"value\",\\, \"both\",\\, \"node\"|})",
      "$0"
    ]
  },
  "getChildren": {
    "prefix": "getChildren",
    "body": [
      "$1.getChildren(-1, 0)$0"
    ]
  },
  "logInfo": {
    "prefix": "loginfo",
    "body": [
      "m.log.info(\"$1\"$2)",
      "$0"
    ]
  },
  "logWarn": {
    "prefix": "logwarn",
    "body": [
      "m.log.warn(\"$1\"$2)",
      "$0"
    ]
  },
  "logError": {
    "prefix": "logerror",
    "body": [
      "m.log.error(\"$1\"$2)",
      "$0"
    ]
  },
  "logVerbose": {
    "prefix": "logverbose",
    "body": [
      "m.log.verbose(\"$1\"$2)",
      "$0"
    ]
  },
  "header": {
    "prefix": "header",
    "body": [
      "'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "'++ ${1:comment}",
      "'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",
      "${0}"
    ]
  },
}
