namespace rooibos.Coverage

  function saveResults() as void
    m.global._rbs_ccn.save = true
    cc = m.global._rbs_ccn
    resolved = cc.resolved
    coverageMap = cc.baseCoverageMap

    ? "Saving hit counts..."
    for each entry in resolved
      if entry <> invalid
        if entry.r = 4 ' CodeCoverageLineType.function
          coverageMap.files[entry.f].functions[entry.fn].totalHit ++
        else if entry.r = 3 ' CodeCoverageLineType.branch
          for each branch in coverageMap.files[entry.f].blocks[entry.bl].branches
            if branch.id = entry.br
              branch.totalHit ++
              exit for
            end if
          end for
        else if entry.r = 1 ' CodeCoverageLineType.code
          for each line in coverageMap.files[entry.f].lines
            if line.lineNumber = entry.l
              line.totalHit ++
              exit for
            end if
          end for
        end if
      end if
    end for

    ? "Saving totals per file..."
    for each file in coverageMap.files
      for each func in file.functions
        if func.totalHit > 0 then file.functionTotalHit ++
      end for

      for each block in file.blocks
        for each branch in block.branches
          if branch.totalHit > 0 then file.branchTotalHit ++
        end for
      end for

      for each line in file.lines
        if line.totalHit > 0 then file.lineTotalHit ++
      end for
    end for

    ? "Done saving results..."

    cc.results = coverageMap
  end function

  function reportCodeCoverage() as void

    if m.global._rbs_ccn = invalid
      ? "There was no rooibos code coverage component - not generating coverage report"
      return
    end if
    t = createObject("roTimespan")
    ? ""
    ? "...Generating code coverage report"
    ? ""
    ' m.global._rbs_ccn.save = true
    cc = m.global._rbs_ccn
    results = cc.results

    hitFiles = []
    missFiles = []
    allLinesCount = 0
    allLinesHit = 0
    for each file in results.files
      filename = file.sourceFile
      expectedCount = file.lineTotalFound
      allLinesCount += expectedCount
      allLinesHit += file.lineTotalHit
      if expectedCount > 0
        if file.lineTotalHit = 0
          resolvedPercent = 0
        else
          resolvedPercent = (file.lineTotalHit / expectedCount) * 100
        end if
        hitFiles.push({ percent: resolvedPercent, text: filename + ": " + str(resolvedPercent).trim() + "% (" + stri(file.lineTotalHit).trim() + "/" + stri(expectedCount).trim() + ")" })
      else
        missFiles.push(filename + ": MISS!")
      end if
    end for
    if allLinesHit = 0
      allLinesPercent = 0
    else
      allLinesPercent = (allLinesHit / allLinesCount) * 100
    end if
    ? ""
    ? ""
    ? "+++++++++++++++++++++++++++++++++++++++++++"
    ? "Code Coverage Report"
    ? "+++++++++++++++++++++++++++++++++++++++++++"
    ? ""
    ? "Total Coverage: " ; str(allLinesPercent).trim() ; "% (" ; stri(allLinesHit).trim() ; "/" + stri(allLinesCount).trim() ; ")"
    ? "Files: " ; hitFiles.count(); "/" ; results.files.count()
    ? ""
    ? "HIT FILES"
    ? "---------"
    hitFiles.SortBy("percent")
    for i = 0 to hitFiles.count() - 1
      ? hitFiles[i].text
    end for
    ? ""
    ? "MISSED FILES"
    ? "------------"
    for i = 0 to missFiles.count() - 1
      ? missFiles[i]
    end for
    ? ""
    ? "+++++++++++++++++++++++++++++++++++++++++++"
    ? "Code Coverage Report Complete"; t.totalMilliseconds(); "ms"
    ? "+++++++++++++++++++++++++++++++++++++++++++"
  end function

  function createLCovOutput(logToConsole = true as boolean)
    ? "Generating lcov.info file..."

    cc = m.global._rbs_ccn
    expectedMap = cc.expectedMap
    filePathMap = cc.filePathMap
    functionMap = cc.functionMap
    resolvedMap = cc.resolvedMap

    results = []

    for each module in filePathMap.items()
      buffer = ""
      moduleNumber = module.key
      filePath = module.value
      packageName = "."

      relativePath = filePath.replace("pkg:", packageName)
      sanitizedPath = relativePath.replace("\\", "/")

      buffer += "TN:" + chr(10)
      buffer += "SF:" + sanitizedPath + chr(10)

      functionName = ""
      for each expected in expectedMap[moduleNumber]
        lineNumber = val(expected)
        SHIFT = 1

        if resolvedMap[moduleNumber] <> invalid and resolvedMap[moduleNumber].doesExist(expected)
          buffer += "DA:" + str(lineNumber + SHIFT).trim() + "," + str(resolvedMap[moduleNumber][expected].count()).trim() + chr(10)
        else
          buffer += "DA:" + str(lineNumber + SHIFT).trim() + ",0" + chr(10)
        end if
      end for

      buffer += "LF:" + str(expectedMap[moduleNumber].count()).trim() + chr(10)

      if resolvedMap[moduleNumber] <> invalid
        buffer += "LH:" + str(resolvedMap[moduleNumber].count()).trim() + chr(10)
      else
        buffer += "LH:0" + chr(10)
      end if

      buffer += "end_of_record"
      if logToConsole
        ? buffer
        ' When logging to the console it is very possible to flood the buffer and cause the application to exit.
        ' Sleep for a short amount of time so as to give console scrapers time to empty the buffer
        sleep(30)
      else
        results.push(buffer)
      end if
    end for

    return results.join(chr(10))
  end function


  function createCovMap()
    ? "Generating lcov.info file..."
    cc = m.global._rbs_ccn
    results = cc.results

    for each file in results.files
      buffer = `TN:\n`
      buffer += `SF:${file.sourceFile}\n`
      ' buffer += `VER:\n`

      ' Add all the found functions for the file
      for each func in file.functions
        buffer += `FN:${func.startLine},${func.endLine},${func.name}\n`
      end for

      ' Write function related data
      for each func in file.functions
        if func.totalHit > 0
          buffer += `FNDA:${func.totalHit},${func.name}\n`
        end if
      end for

      buffer += `FNF:${file.functionTotalFound}\n`
      buffer += `FNH:${file.functionTotalHit}\n`

      ' Write branch related data
      for each block in file.blocks
          for each branch in block.branches
              if branch.totalHit > 0
                buffer += `BRDA:${branch.line},${block.id},${branch.id},${branch.totalHit}\n`
              end if
          end for
      end for

      buffer += `BRF:${file.branchTotalFound}\n`
      buffer += `BRH:${file.branchTotalHit}\n`

      ' Write the per line related data
      for each line in file.lines
        buffer += `DA:${line.lineNumber},${line.totalHit}\n`
      end for

      buffer += `LF:${file.lineTotalFound}\n`
      buffer += `LH:${file.lineTotalHit}\n`
      buffer += `end_of_record\n`
      ? buffer
      sleep(30)
    end for
  end function

  function printLCovInfo()

    ?
    ? "+++++++++++++++++++++++++++++++++++++++++++"
    ? "LCOV.INFO FILE"
    ? "+++++++++++++++++++++++++++++++++++++++++++"
    ?
    ? "+-=-coverage:start"
    rooibos.coverage.createCovMap()
    ' rooibos.coverage.createLCovOutput()
    ? "+-=-coverage:end"
  end function

end namespace