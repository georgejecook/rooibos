'@TestSuite [BT] Basic tests
namespace Rooibos.Tests.BasicTests

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '@It tests the node context is available for a Node scope function
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  '@Test 
  function NodeScope() as void
    m.assertNotInvalid(m.node)
    Rooibos.Tests.BasicTests.doSomethingInNodeScope(true)
    m.assertInvalid(m._isNodeScopeVarSet)
    m.assertTrue(m.node._isNodeScopeVarSet)
  end function

  function doSomethingInNodeScope(value)
    m._isNodeScopeVarSet = value
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '@It tests aa's with a mock will not crash the box!
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  '@Test 
  function EqualsFixForStubbedAAs() as void
    aa = { "test": "value" }
    m.expectOnce(aa, "getStubbedObject", [aa])

    aa.getStubbedObject(aa)
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '@It tests aa's that get printed as failures don't crash box
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  '@Test 
  function PrintResultsFixForStubbedAAs() as void
    aa = { "test": "value" }
    bb = { "other": "value" }
    m.expectOnce(bb, "getStubbedObject", [aa])
    m.assertEqual(aa, bb)
    'not crashing on printing the wrong output is a pass
    m.assertMocks()
    m.currentResult.Reset()
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '@It url in params
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  '@Test simple
  '@Params["http://101.rooibos.com"] 
  function urlParams(url) as void
    m.assertEqual(url, "http://101.rooibos.com")
  end function

  '@Test on objects
  '@Params[{"url":"http://101.rooibos.com", "othervalue":2}] 
  '@Params[{url:"http://101.rooibos.com", "othervalue":2}] 
  '@Params[{url:"http://101.rooibos.com", othervalue:2}] 
  function urlParams_objects(aa) as void
    m.assertEqual(aa.url, "http://101.rooibos.com")
    m.assertEqual(aa.othervalue, 2)
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '@It tests async tests
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  '@Test times out
  function async_timeout()
    item = { "id": "item" }

    m.assertAsyncField(item, "id")
    isFail = m.currentResult.isFail
    m.currentResult.Reset()
    m.assertTrue(isFail) 

  end function

end namespace