'@TestSuite ET ExpectTests

namespace ET

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests bug with expectOnce not matching values
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test reported case
'@Params[[52], true]
'@Params[invalid, false]
'@Params[[invalid], true]
'@Params[["42"], true]
'@Params[[42], false]
function expectOnce_valuesBug_reported(expectedValue, expectMockFail) as void
  obj = {
    foo: function(arg0) : return arg0 : end function
  }
  
  m.ExpectOnce(obj, "foo", expectedValue)
  obj.foo(42)
  m.isAutoAssertingMocks = false
  m.AssertMocks()
  
  isFail = m.currentResult.isFail
  m.currentResult.Reset()
  m.CleanMocks()
  m.AssertEqual(isFail, expectMockFail) 
end function


'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests mock count limit
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test mock count limit at least 25
function expect_mockCountLimitToBeAtLeast25() as void
  
  interface = {}
  
  mockCountLimit = 25 
  for i = 1 to mockCountLimit step + 1
    keyName = StrI(i).trim()
    interface[keyName] = function(arg0) : return arg0 : end function
    
    expectedArg = "a"
    expectedReturnValue = "b" 
    m.ExpectOnce(interface, keyName, [expectedArg], [expectedReturnValue])
    
    interface[keyName](expectedArg)
  end for
  
end function

end namespace